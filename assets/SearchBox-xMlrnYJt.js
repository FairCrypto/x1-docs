import{f as m,g as T,h as C,i as _,t as M,u as U,j as D,_ as L,o as c,c as h,k as N,v as B,a as f,n as v,l as w,F as R,m as P,p as x,q as A,s as V}from"./app-3X6tQEBe.js";const X=[{path:"/",title:"X1 Blockchain",pathLocale:"/",contents:[{header:"X1 Blockchain",slug:"x1-blockchain",content:"X1 is a simple, fast, and secure EVM-compatible network for the next generation of decentralized applications powered by the Fantom Lachesis consensus algorithm."},{header:"Explore the Network",slug:"explore-the-network",content:""},{header:"Testnet",slug:"testnet",content:"Chain ID: 204005"},{header:"Websites",slug:"websites",content:`X1 Explorer
X1 PWA Explorer
X1 Wallet`},{header:"RPC Endpoints",slug:"rpc-endpoints",content:`https://x1-testnet.xen.network/
wss://x1-testnet.xen.network`}]},{path:"/developer/docker/",title:"Run with Docker",pathLocale:"/",contents:[{header:"Run with Docker",slug:"run-with-docker",content:`See the Docker packages here. Pull the latest image docker pull ghcr.io/faircrypto/go-x1:latest Create the data directory mkdir -p $HOME/.x1 Run the container Full Node
API Node
Archive Node docker run -d --name x1 \\ -p 5050:5050 \\ -v $HOME/.x1:/root/.x1 \\ ghcr.io/faircrypto/go-x1:latest \\ --testnet \\ --syncmode snap docker run -d --name x1 \\ -p 5050:5050 \\ -p 8545:8545 \\ -p 8546:8546 \\ -v $HOME/.x1:/root/.x1 \\ ghcr.io/faircrypto/go-x1:latest \\ --testnet \\ --syncmode snap \\ --http \\ --http.port 8545 \\ --http.addr 0.0.0.0 \\ --http.vhosts "*" \\ --http.corsdomain "*" \\ --ws \\ --ws.addr 0.0.0.0 \\ --ws.port 8546 \\ --ws.origins "*" mkdir -p $HOME/.x1 # Run the container with the data directory mounted
docker run -d --name x1 \\ -p 5050:5050 \\ -v $HOME/.x1:/root/.x1 \\ ghcr.io/faircrypto/go-x1:latest \\ --testnet \\ --syncmode full \\ --gcmode archive`}]},{path:"/developer/validator/",title:"Validator Nodes",pathLocale:"/",contents:[{header:"Validator Nodes",slug:"validator-nodes",content:`Validator nodes are a crucial component of the X1 network.
These nodes operate as full nodes and contribute to consensus,
thereby enhancing the network's security and facilitating the creation of new blocks. Minimum state requirement: 100,000 XN
Maximum stake: 15x the minimum state amount
Earn staking rewards and a 15% fee on delegator's rewards
Minimum hardware requirements: AWS T2.large EC2 (or equivalent) and at least
800GB of Amazon EBS General Purpose SSD
(gp2) storage (or equivalent).`},{header:"Become a Validator",slug:"become-a-validator",content:`Step 1: Run a full node as described here and allow it to fully sync. Step 2: Fund a wallet with enough XN to become a validator.
At the time of writing, you need at least 100,000 XN to become a validator.
We highly recommend using a hardware wallet. Step 3: Create validator key with go-x1. Take note of the validator public key; we will need it later.
x1 validator new
After entering the command, you will be prompted to enter a passwordâ€”use a strong one!
You can, for example, use a password manager to generate a strong password to secure your wallet. Step 4: Place the validator password in a file.
echo "MY_STRONG_PASSWORD" > /var/lib/x1/.x1/.password Step 5: Navigate to the SFC Contract on the explorer. Step 6: Click the "Connect wallet" button and connect to your validator wallet. Step 7: Enter your validator public key from step 3 and the amount of XN you want to stake, then click "Write". Step 8: Confirm the transaction in your wallet. Step 9: Confirm your validator registration by searching for your validator ID on the PWA explorer. Step 10: Add the --validator.id and --validator.pubkey flags to your node's command line flags and restart your node. Replace YOUR_VALIDATOR_ID with your validator ID and YOUR_VALIDATOR_PUBKEY with your validator's public key. # Example command line flags for a validator node.
# x1 --testnet # --syncmode snap \\
# --validator.id YOUR_VALIDATOR_ID \\
# --validator.pubkey YOUR_VALIDATOR_PUBKEY \\
# --validator.password ~/.x1/.password # Use the example environment file for a validator node provided by the go-x1 package
# and replace the placeholder values with your validator ID and public key.
cat /system/usr/share/x1/validator-node-env \\ sed "s/VALIDATOR_ID/YOUR_VALIDATOR_ID/g" \\ sed "s/VALIDATOR_PUBKEY/YOUR_VALIDATOR_PUBKEY/g" \\ >> "$HOMEBREW_PREFIX"/etc/default/x1 # or edit the environment file directly
# sudo nano "$HOMEBREW_PREFIX"/etc/default/x1 # Restart the node
sudo systemctl restart x1.service TIP
Congratulations, you are now running an X1 validator node! Make sure to keep your node up and running 24 hours a day.`},{header:"Register a Validator",slug:"register-a-validator",content:"Register a validator name and icon to help X1 delegators find you. Testnet contract 0x891416e8bDB4437d4D0D303781A3828262220581"},{header:"Config File",slug:"config-file",content:`Create a config file in JSON format that contains the following parameters (you can also leave parameters empty):
{ "name": "VALIDATOR_NAME", /* Name of the validator */ "logoUrl": "LOGO_URL", /* Validator logo (PNG|JPEG|SVG) - 100px x 100px is enough */ "website": "WEBSITE_URL", /* Website icon on the right */ "contact": "CONTACT_URL" /* Contact icon on the right */
} It could look something like this ðŸ‘‡ { "name": "xencrypto1", "logoUrl": "https://xen.network/XEN-logo-square-dark%20512x512.png", "website": "https://xen.network", "contact": "https://t.me/XENCryptoTalk"
}
Then host the file somewhere, so it is publicly accessible! Ex: https://x1-testnet-genesis.s3.amazonaws.com/xencrypto1.json`},{header:"Update your info in the smart contract",slug:"update-your-info-in-the-smart-contract",content:`From the Explorer
From the console Visit the ValidatorInfo contract in the explorer and call the updateInfo function with your config file URL. Click Write and use your Validator wallet to sign the transaction. Connect to your validator node Open up a x1 console session via x1 attach Load the ValidatorInfo contract ABI and instantiate the contract
abi = JSON.parse('[{"type":"constructor","stateMutability":"nonpayable","inputs":[]},{"type":"error","name":"AddressEmptyCode","inputs":[{"type":"address","name":"target","internalType":"address"}]},{"type":"error","name":"ERC1967InvalidImplementation","inputs":[{"type":"address","name":"implementation","internalType":"address"}]},{"type":"error","name":"ERC1967NonPayable","inputs":[]},{"type":"error","name":"FailedInnerCall","inputs":[]},{"type":"error","name":"InvalidInitialization","inputs":[]},{"type":"error","name":"NotInitializing","inputs":[]},{"type":"error","name":"OwnableInvalidOwner","inputs":[{"type":"address","name":"owner","internalType":"address"}]},{"type":"error","name":"OwnableUnauthorizedAccount","inputs":[{"type":"address","name":"account","internalType":"address"}]},{"type":"error","name":"UUPSUnauthorizedCallContext","inputs":[]},{"type":"error","name":"UUPSUnsupportedProxiableUUID","inputs":[{"type":"bytes32","name":"slot","internalType":"bytes32"}]},{"type":"event","name":"InfoUpdated","inputs":[{"type":"uint256","name":"stakerID","internalType":"uint256","indexed":false}],"anonymous":false},{"type":"event","name":"Initialized","inputs":[{"type":"uint64","name":"version","internalType":"uint64","indexed":false}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"type":"address","name":"previousOwner","internalType":"address","indexed":true},{"type":"address","name":"newOwner","internalType":"address","indexed":true}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"type":"address","name":"implementation","internalType":"address","indexed":true}],"anonymous":false},{"type":"function","stateMutability":"view","outputs":[{"type":"string","name":"","internalType":"string"}],"name":"UPGRADE_INTERFACE_VERSION","inputs":[]},{"type":"function","stateMutability":"view","outputs":[{"type":"string","name":"","internalType":"string"}],"name":"getInfo","inputs":[{"type":"uint256","name":"validatorId","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"initialize","inputs":[{"type":"address","name":"initialOwner","internalType":"address"},{"type":"address","name":"sfcContractAddress_","internalType":"address"}]},{"type":"function","stateMutability":"view","outputs":[{"type":"address","name":"","internalType":"address"}],"name":"owner","inputs":[]},{"type":"function","stateMutability":"view","outputs":[{"type":"bytes32","name":"","internalType":"bytes32"}],"name":"proxiableUUID","inputs":[]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"renounceOwnership","inputs":[]},{"type":"function","stateMutability":"view","outputs":[{"type":"address","name":"","internalType":"address"}],"name":"sfcContractAddress","inputs":[]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"transferOwnership","inputs":[{"type":"address","name":"newOwner","internalType":"address"}]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"updateInfo","inputs":[{"type":"string","name":"configUrl","internalType":"string"}]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"updateSfcContractAddress","inputs":[{"type":"address","name":"sfcContractAddress_","internalType":"address"}]},{"type":"function","stateMutability":"payable","outputs":[],"name":"upgradeToAndCall","inputs":[{"type":"address","name":"newImplementation","internalType":"address"},{"type":"bytes","name":"data","internalType":"bytes"}]},{"type":"function","stateMutability":"view","outputs":[{"type":"string","name":"","internalType":"string"}],"name":"validatorInfos","inputs":[{"type":"uint256","name":"","internalType":"uint256"}]}]')
validatorInfoContract = web3.ftm.contract(abi).at("0x891416e8bDB4437d4D0D303781A3828262220581") Unlock your account
web3.personal.unlockAccount("WALLET_ADDRESS") Call the updateInfo function of the ValidatorInfo contract (make sure you have enough XN on your wallet to cover the transaction fee)
validatorInfoContract.updateInfo("CONFIG_URL", { from: "WALLET_ADDRESS" })
// e.g.: validatorInfoContract.updateInfo("https://x1-testnet-genesis.s3.amazonaws.com/xencrypto1.json", { from: "0xa4ddde0afdaea05a3d5a2ec6b5c7f3fc9945020b" })`}]},{path:"/developer/getting-started/",title:"Getting Started",pathLocale:"/",contents:[{header:"Getting Started",slug:"getting-started",content:"Whether you're interested in running an API node for a decentralized application, acting as a validator to stake XN, or operating a full node, contributing to the X1 Network is a rewarding endeavor. Embarking on this journey is straightforward. Simply adhere to the guidelines provided below."},{header:"Installation",slug:"installation",content:`We recommend using the provided system packages to install X1 and run it as a service on your system. Ubuntu (x86_64)
Ubuntu (arm64)
Radhat (x86_64)
Radhat (arm64)
MacOS
Source # Install dependencies
sudo apt update -y
sudo apt install -y wget # Download and install the package
wget -O go-x1_linux-x86_64.deb \\ https://github.com/nibty/go-x1/releases/latest/download/go-x1_linux-x86_64.deb
sudo dpkg -i go-x1_linux-x86_64.deb # Install dependencies
sudo apt update -y
sudo apt install -y wget # Download and install the package
wget -O go-x1_linux-arm64.deb \\ https://github.com/nibty/go-x1/releases/latest/download/go-x1_linux-arm64.deb
sudo dpkg -i go-x1_linux-arm64.deb sudo dnf install -y \\ https://github.com/nibty/go-x1/releases/latest/download/go-x1_linux-x86_64.rpm sudo dnf install -y \\ https://github.com/nibty/go-x1/releases/latest/download/go-x1_linux-arm64.rpm brew install faircrypto/go-x1/x1 # Install dependencies (ex: ubuntu)
apt update -y
apt install -y golang wget git make # Clone and build the X1 binary
git clone --branch x1 https://github.com/FairCrypto/go-x1
cd go-x1
make x1 # Install the binary, config, and systemd service file
sudo make install`},{header:"Configuration",slug:"configuration",content:""},{header:"Command Line Flags",slug:"command-line-flags",content:`You can adjust the X1 command line flags by modifying the environment file.
On a Linux system, this file is located at /etc/default/x1.
If you're using macOS, you'll find it at $HOMEBREW_PREFIX/etc/default/x1.
We provide ready-to-use example environment files for each node type. The default environment file is for a full node. Run the following command to copy the example environment file Full Node (testnet)
API Node (testnet)
Archive Node (testnet) cp /system/usr/share/x1/full-node-env "$HOMEBREW_PREFIX/etc/default/x1" cp /system/usr/share/x1/api-node-env "$HOMEBREW_PREFIX/etc/default/x1" cp /system/usr/share/x1/archive-node-env "$HOMEBREW_PREFIX/etc/default/x1" TIP
Start with a full node now if you plan on later running a validator node.`},{header:"User/Group",slug:"user-group",content:`By default, the service will run as the user and group x1 with the home directory /var/lib/x1. You may change the user to your needs by running the following command. # Edit the service file
sudo systemctl edit x1.service # Add the following lines with an existing
# user and group of your choice.
[Service]
User=<user> Group=<group>`},{header:"Running the Node",slug:"running-the-node",content:`Start the service and enable it on boot sudo systemctl start x1.service
sudo systemctl enable x1.service Stop the service sudo systemctl stop x1.service Restart the service sudo systemctl restart x1.service`},{header:"Logging",slug:"logging",content:"Tail the logs journalctl -t x1 -f See the last 1000 lines of logs journalctl -t x1 -n 1000"},{header:"Console Access",slug:"console-access",content:`# Become the x1 user
sudo su x1 # Attach to the console
x1 attach`}]},{path:"/404.html",title:"",pathLocale:"/",contents:[]}],$="update-vuepress-plugin-full-text-search2-search-index";var k=m(X),F=T(()=>{const e=new Map;for(const t of k.value)e.set(t.path,t);return e});import.meta.webpackHot&&(__VUE_HMR_RUNTIME__[$]=e=>{k.value=e});function W(e){const t=m([]);let r=null;return C(e,()=>{r&&clearTimeout(r),r=setTimeout(o,100)}),t;function o(){const d=e.value.toLowerCase().trim();if(!d){t.value=[];return}const s=new Map,n=new Set;for(const a of k.value)for(const i of H(a,d)){n.add(i.parentPageTitle);let l=s.get(i.parentPageTitle);l||(l=[],s.set(i.parentPageTitle,l)),l.push(i)}const u=[...n].sort((a,i)=>{const l=s.get(a);return s.get(i).length-l.length});t.value=[...s].flatMap(([,a])=>a).sort((a,i)=>a.parentPagePriority-i.parentPagePriority||u.indexOf(a.parentPageTitle)-u.indexOf(i.parentPageTitle)||a.priority-i.priority)}}function*H(e,t){const r=I(e.title,t);if(r){yield{path:e.path,parentPageTitle:b(e),title:e.title,display:r,page:e,content:null,parentPagePriority:1,priority:1};return}for(const o of e.contents){const d=I(o.header,t);if(d){yield{path:e.path+(o.slug?`#${o.slug}`:""),parentPageTitle:b(e),title:e.title,display:d,page:e,content:null,parentPagePriority:10,priority:2};continue}const s=I(o.content,t);s&&(yield{path:e.path+(o.slug?`#${o.slug}`:""),parentPageTitle:b(e),title:e.title,display:[{type:"header",str:`${o.header}
`},...s],page:e,content:null,parentPagePriority:10,priority:10})}}function b(e){const t=e.path.split("/");let r="/";return t[1]&&(r=`/${t[1]}/`),(F.value.get(r)||e).title}function I(e,t){const r=[];let o=0;const d=e.toLowerCase().replace(/\s/gu," ");let s=0,n=d.indexOf(t,s);if(n<0)return null;for(;n>=0;){const a=n+t.length;if(u(e.slice(s,n),"normal"),u(e.slice(n,a),"highlight"),s=a,n=d.indexOf(t,s),o>100)break}return u(e.slice(s),"normal"),r.filter(a=>a.str);function u(a,i){let l=a;i==="normal"&&l.length>100&&o===0&&(l=`â€¦ ${l.slice(-10)}`);let g=!1;if(o+l.length>100){if(r.some(y=>y.type==="ellipsis"))return;l=l.slice(0,Math.max(100-o,1)),g=!0}r.push({type:i,str:l}),o+=l.length,g&&(r.push({type:"ellipsis",str:" â€¦"}),o+=2)}}var Y={};const G=Y,z=_({name:"SearchBox",props:{locales:{type:Object,required:!1,default:()=>G}},setup(e){const{locales:t}=M(e),r=m(""),o=m(!1),d=m(-1),s=W(r),n=T(()=>r.value&&o.value&&s.value.length),u=U(),a=D(),i=T(()=>t.value[a.value]??{});function l(){if(!n.value)return;let p=d.value-1;p<0&&(p=s.value.length-1),y(p)}function g(){if(!n.value)return;let p=d.value+1;p>=s.value.length&&(p=0),y(p)}function y(p){d.value=p}function O(){d.value=-1}function S(p){if(!n.value)return;const E=s.value[p];E&&u.push(E.path)}return{query:r,focused:o,focusIndex:d,suggestions:s,activeSuggestion:n,onUp:l,onDown:g,focus:y,unfocus:O,go:S,locale:i}}}),j={class:"search-box",role:"search"},q=["placeholder"],K=["onMousedown","onMouseenter"],J=["href"],Q={key:0,class:"parent-page-title"},Z={class:"suggestion-row"},ee={class:"page-title"},te={class:"suggestion-content"};function ne(e,t,r,o,d,s){return c(),h("div",j,[N(f("input",{ref:"input","onUpdate:modelValue":t[0]||(t[0]=n=>e.query=n),"aria-label":"Search",class:v({focused:e.focused}),placeholder:e.locale.placeholder??"Search",autocomplete:"off",spellcheck:"false",onFocus:t[1]||(t[1]=()=>e.focused=!0),onBlur:t[2]||(t[2]=()=>e.focused=!1),onKeyup:[t[3]||(t[3]=w(n=>e.go(e.focusIndex),["enter"])),t[4]||(t[4]=w((...n)=>e.onUp&&e.onUp(...n),["up"])),t[5]||(t[5]=w((...n)=>e.onDown&&e.onDown(...n),["down"]))]},null,42,q),[[B,e.query]]),e.activeSuggestion?(c(),h("ul",{key:0,class:"suggestions",onMouseleave:t[7]||(t[7]=(...n)=>e.unfocus&&e.unfocus(...n))},[(c(!0),h(R,null,P(e.suggestions,(n,u)=>(c(),h("li",{key:u,class:v(["suggestion",{focused:u===e.focusIndex}]),onMousedown:a=>e.go(u),onMouseenter:a=>e.focus(u)},[f("a",{href:n.path,onClick:t[6]||(t[6]=V(()=>{},["prevent"]))},[n.parentPageTitle&&(!e.suggestions[u-1]||e.suggestions[u-1].parentPageTitle!==n.parentPageTitle)?(c(),h("div",Q,x(n.parentPageTitle),1)):A("v-if",!0),f("div",Z,[f("div",ee,x(n.title||n.path),1),f("div",te,[(c(!0),h(R,null,P(n.display,(a,i)=>(c(),h("span",{key:i,class:v(a.type)},x(a.str),3))),128))])])],8,J)],42,K))),128))],32)):A("v-if",!0)])}const oe=L(z,[["render",ne],["__scopeId","data-v-fd6cd4d5"],["__file","SearchBox.vue"]]);export{oe as default};
