import{_ as c,r as i,o as u,c as d,a as n,b as t,d as e,w as s,e as l}from"./app-3X6tQEBe.js";const y="/x1-docs/assets/connect-wallet-rUwjIEsH.png",m="/x1-docs/assets/create-validator-ZzcNDk3Z.png",h="/x1-docs/assets/updateInfo-JtDWa2P8.png",g={},k=n("h1",{id:"validator-nodes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#validator-nodes","aria-hidden":"true"},"#"),t(" Validator Nodes")],-1),f=n("p",null,"Validator nodes are a crucial component of the X1 network. These nodes operate as full nodes and contribute to consensus, thereby enhancing the network's security and facilitating the creation of new blocks.",-1),v=n("ul",null,[n("li",null,"Minimum state requirement: 100,000 XN"),n("li",null,"Maximum stake: 15x the minimum state amount"),n("li",null,"Earn staking rewards and a 15% fee on delegator's rewards"),n("li",null,"Minimum hardware requirements: AWS T2.large EC2 (or equivalent) and at least 800GB of Amazon EBS General Purpose SSD (gp2) storage (or equivalent).")],-1),b=n("h2",{id:"become-a-validator",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#become-a-validator","aria-hidden":"true"},"#"),t(" Become a Validator")],-1),_=l(`<li><p>Step 1: Run a full node as described <a href="../getting-started">here</a> and allow it to <strong>fully sync</strong>.</p></li><li><p>Step 2: Fund a wallet with enough XN to become a validator. At the time of writing, you need at least 100,000 XN to become a validator. <strong>We highly recommend using a hardware wallet.</strong></p></li><li><p>Step 3: Create validator key with go-x1. Take note of the validator public key; we will need it later.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>x1 validator new
</code></pre></div><p>After entering the command, you will be prompted to enter a passwordâ€”use a <strong>strong one!</strong> You can, for example, use a password manager to generate a strong password to secure your wallet.</p></li><li><p>Step 4: Place the validator password in a file.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;MY_STRONG_PASSWORD&quot;</span> <span class="token operator">&gt;</span> /var/lib/x1/.x1/.password
</code></pre></div></li>`,4),x={href:"https://explorer.x1-testnet.xen.network/address/0xFC00FACE00000000000000000000000000000000/write-contract#address-tabs",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,[n("p",null,'Step 6: Click the "Connect wallet" button and connect to your validator wallet.'),n("p",null,[n("a",{href:"connect-wallet.png"},[n("img",{src:y,alt:"Connect wallet"})])])],-1),I=n("li",null,[n("p",null,'Step 7: Enter your validator public key from step 3 and the amount of XN you want to stake, then click "Write".'),n("p",null,[n("a",{href:"create-validator.png"},[n("img",{src:m,alt:"Connect wallet"})])])],-1),q=n("li",null,[n("p",null,"Step 8: Confirm the transaction in your wallet.")],-1),T={href:"https://pwa-explorer.x1-testnet.xen.network/staking",target:"_blank",rel:"noopener noreferrer"},A=l(`<li><p>Step 10: Add the <code>--validator.id</code> and <code>--validator.pubkey</code> flags to your node&#39;s command line flags and restart your node.</p><blockquote><p>Replace <code>YOUR_VALIDATOR_ID</code> with your validator ID and <code>YOUR_VALIDATOR_PUBKEY</code> with your validator&#39;s public key.</p></blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Example command line flags for a validator node.</span>
<span class="token comment"># x1 --testnet </span>
<span class="token comment">#   --syncmode snap \\</span>
<span class="token comment">#   --validator.id YOUR_VALIDATOR_ID \\</span>
<span class="token comment">#   --validator.pubkey YOUR_VALIDATOR_PUBKEY \\</span>
<span class="token comment">#   --validator.password ~/.x1/.password</span>

<span class="token comment"># Use the example environment file for a validator node provided by the go-x1 package</span>
<span class="token comment"># and replace the placeholder values with your validator ID and public key.</span>
<span class="token function">cat</span> /system/usr/share/x1/validator-node-env <span class="token punctuation">\\</span>
   <span class="token function">sed</span> <span class="token string">&quot;s/VALIDATOR_ID/YOUR_VALIDATOR_ID/g&quot;</span> <span class="token punctuation">\\</span>
   <span class="token function">sed</span> <span class="token string">&quot;s/VALIDATOR_PUBKEY/YOUR_VALIDATOR_PUBKEY/g&quot;</span> <span class="token punctuation">\\</span>
 <span class="token operator">&gt;&gt;</span> <span class="token string">&quot;<span class="token variable">$HOMEBREW_PREFIX</span>&quot;</span>/etc/default/x1

<span class="token comment"># or edit the environment file directly</span>
<span class="token comment"># sudo nano &quot;$HOMEBREW_PREFIX&quot;/etc/default/x1</span>

<span class="token comment"># Restart the node</span>
<span class="token function">sudo</span> systemctl restart x1.service
</code></pre></div></li>`,1),C=l(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Congratulations, you are now running an X1 validator node! Make sure to keep your node up and running 24 hours a day.</p></div><h2 id="register-a-validator" tabindex="-1"><a class="header-anchor" href="#register-a-validator" aria-hidden="true">#</a> Register a Validator</h2><p>Register a validator name and icon to help X1 delegators find you.</p><blockquote><p>Testnet contract</p></blockquote><div class="language-solidity" data-ext="solidity"><pre class="language-solidity"><code><span class="token number">0x891416e8bDB4437d4D0D303781A3828262220581</span>
</code></pre></div><h3 id="config-file" tabindex="-1"><a class="header-anchor" href="#config-file" aria-hidden="true">#</a> Config File</h3><p>Create a config file in <code>JSON</code> format that contains the following parameters (you can also leave parameters empty):</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VALIDATOR_NAME&quot;</span><span class="token punctuation">,</span> <span class="token comment">/* Name of the validator */</span>
  <span class="token string-property property">&quot;logoUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;LOGO_URL&quot;</span><span class="token punctuation">,</span> <span class="token comment">/* Validator logo (PNG|JPEG|SVG) - 100px x 100px is enough */</span>
  <span class="token string-property property">&quot;website&quot;</span><span class="token operator">:</span> <span class="token string">&quot;WEBSITE_URL&quot;</span><span class="token punctuation">,</span> <span class="token comment">/* Website icon on the right */</span>
  <span class="token string-property property">&quot;contact&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CONTACT_URL&quot;</span> <span class="token comment">/* Contact icon on the right */</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p>It could look something like this ðŸ‘‡</p></blockquote><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xencrypto1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;logoUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://xen.network/XEN-logo-square-dark%20512x512.png&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;website&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://xen.network&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;contact&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://t.me/XENCryptoTalk&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,10),E={href:"https://x1-testnet-genesis.s3.amazonaws.com/xencrypto1.json",target:"_blank",rel:"noopener noreferrer"},R=n("h3",{id:"update-your-info-in-the-smart-contract",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#update-your-info-in-the-smart-contract","aria-hidden":"true"},"#"),t(" Update your info in the smart contract")],-1),D={href:"https://explorer.x1-testnet.xen.network/address/0x891416e8bDB4437d4D0D303781A3828262220581/write-proxy#address-tabs",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"updateInfo",-1),U=n("p",null,[n("img",{src:h,alt:"updateInfo.png"})],-1),S=n("p",null,[t("Click "),n("code",null,"Write"),t(" and use your Validator wallet to sign the transaction.")],-1),N=n("ol",null,[n("li",null,[n("p",null,"Connect to your validator node")]),n("li",null,[n("p",null,[t("Open up a x1 console session via "),n("code",null,"x1 attach")])]),n("li",null,[n("p",null,"Load the ValidatorInfo contract ABI and instantiate the contract"),n("div",{class:"language-solidity","data-ext":"solidity"},[n("pre",{class:"language-solidity"},[n("code",null,[t("abi "),n("span",{class:"token operator"},"="),t(" JSON"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"parse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},`'[{"type":"constructor","stateMutability":"nonpayable","inputs":[]},{"type":"error","name":"AddressEmptyCode","inputs":[{"type":"address","name":"target","internalType":"address"}]},{"type":"error","name":"ERC1967InvalidImplementation","inputs":[{"type":"address","name":"implementation","internalType":"address"}]},{"type":"error","name":"ERC1967NonPayable","inputs":[]},{"type":"error","name":"FailedInnerCall","inputs":[]},{"type":"error","name":"InvalidInitialization","inputs":[]},{"type":"error","name":"NotInitializing","inputs":[]},{"type":"error","name":"OwnableInvalidOwner","inputs":[{"type":"address","name":"owner","internalType":"address"}]},{"type":"error","name":"OwnableUnauthorizedAccount","inputs":[{"type":"address","name":"account","internalType":"address"}]},{"type":"error","name":"UUPSUnauthorizedCallContext","inputs":[]},{"type":"error","name":"UUPSUnsupportedProxiableUUID","inputs":[{"type":"bytes32","name":"slot","internalType":"bytes32"}]},{"type":"event","name":"InfoUpdated","inputs":[{"type":"uint256","name":"stakerID","internalType":"uint256","indexed":false}],"anonymous":false},{"type":"event","name":"Initialized","inputs":[{"type":"uint64","name":"version","internalType":"uint64","indexed":false}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"type":"address","name":"previousOwner","internalType":"address","indexed":true},{"type":"address","name":"newOwner","internalType":"address","indexed":true}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"type":"address","name":"implementation","internalType":"address","indexed":true}],"anonymous":false},{"type":"function","stateMutability":"view","outputs":[{"type":"string","name":"","internalType":"string"}],"name":"UPGRADE_INTERFACE_VERSION","inputs":[]},{"type":"function","stateMutability":"view","outputs":[{"type":"string","name":"","internalType":"string"}],"name":"getInfo","inputs":[{"type":"uint256","name":"validatorId","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"initialize","inputs":[{"type":"address","name":"initialOwner","internalType":"address"},{"type":"address","name":"sfcContractAddress_","internalType":"address"}]},{"type":"function","stateMutability":"view","outputs":[{"type":"address","name":"","internalType":"address"}],"name":"owner","inputs":[]},{"type":"function","stateMutability":"view","outputs":[{"type":"bytes32","name":"","internalType":"bytes32"}],"name":"proxiableUUID","inputs":[]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"renounceOwnership","inputs":[]},{"type":"function","stateMutability":"view","outputs":[{"type":"address","name":"","internalType":"address"}],"name":"sfcContractAddress","inputs":[]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"transferOwnership","inputs":[{"type":"address","name":"newOwner","internalType":"address"}]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"updateInfo","inputs":[{"type":"string","name":"configUrl","internalType":"string"}]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"updateSfcContractAddress","inputs":[{"type":"address","name":"sfcContractAddress_","internalType":"address"}]},{"type":"function","stateMutability":"payable","outputs":[],"name":"upgradeToAndCall","inputs":[{"type":"address","name":"newImplementation","internalType":"address"},{"type":"bytes","name":"data","internalType":"bytes"}]},{"type":"function","stateMutability":"view","outputs":[{"type":"string","name":"","internalType":"string"}],"name":"validatorInfos","inputs":[{"type":"uint256","name":"","internalType":"uint256"}]}]'`),n("span",{class:"token punctuation"},")"),t(`
validatorInfoContract `),n("span",{class:"token operator"},"="),t(" web3"),n("span",{class:"token punctuation"},"."),t("ftm"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"contract"),n("span",{class:"token punctuation"},"("),t("abi"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"at"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"0x891416e8bDB4437d4D0D303781A3828262220581"'),n("span",{class:"token punctuation"},")"),t(`
`)])])])]),n("li",null,[n("p",null,"Unlock your account"),n("div",{class:"language-solidity","data-ext":"solidity"},[n("pre",{class:"language-solidity"},[n("code",null,[t("web3"),n("span",{class:"token punctuation"},"."),t("personal"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unlockAccount"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"WALLET_ADDRESS"'),n("span",{class:"token punctuation"},")"),t(`
`)])])])]),n("li",null,[n("p",null,[t("Call the "),n("code",null,"updateInfo"),t(" function of the ValidatorInfo contract (make sure you have enough XN on your wallet to cover the transaction fee)")]),n("div",{class:"language-solidity","data-ext":"solidity"},[n("pre",{class:"language-solidity"},[n("code",null,[t("validatorInfoContract"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"updateInfo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"CONFIG_URL"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token keyword"},"from"),n("span",{class:"token punctuation"},":"),t(),n("span",{class:"token string"},'"WALLET_ADDRESS"'),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),t(`
`),n("span",{class:"token comment"},'// e.g.: validatorInfoContract.updateInfo("https://x1-testnet-genesis.s3.amazonaws.com/xencrypto1.json", { from: "0xa4ddde0afdaea05a3d5a2ec6b5c7f3fc9945020b" })'),t(`
`)])])])])],-1);function V(L,M){const a=i("ExternalLinkIcon"),p=i("Tabs");return u(),d("div",null,[k,f,v,b,n("ul",null,[_,n("li",null,[n("p",null,[t("Step 5: Navigate to the "),n("a",x,[t("SFC Contract"),e(a)]),t(" on the explorer.")])]),w,I,q,n("li",null,[n("p",null,[t("Step 9: Confirm your validator registration by searching for your validator ID on the "),n("a",T,[t("PWA explorer"),e(a)]),t(".")])]),A]),C,n("p",null,[t("Then host the file somewhere, so it is publicly accessible! Ex: "),n("a",E,[t("https://x1-testnet-genesis.s3.amazonaws.com/xencrypto1.json"),e(a)])]),R,e(p,{id:"136",data:[{id:"From the Explorer"},{id:"From the console"}]},{title0:s(({value:o,isActive:r})=>[t("From the Explorer")]),title1:s(({value:o,isActive:r})=>[t("From the console")]),tab0:s(({value:o,isActive:r})=>[n("p",null,[t("Visit the "),n("a",D,[t("ValidatorInfo"),e(a)]),t(" contract in the explorer and call the "),O,t(" function with your config file URL.")]),U,S]),tab1:s(({value:o,isActive:r})=>[N]),_:1})])}const B=c(g,[["render",V],["__file","index.html.vue"]]);export{B as default};
